#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Load environment variables
if [ ! -f .env ]; then
  echo -e "${RED}Error: .env file not found. Please run ./deploy first.${NC}"
  exit 1
fi

source .env

if [ -z "$API_ENDPOINT" ] || [ -z "$API_KEY" ]; then
  echo -e "${RED}Error: API_ENDPOINT or API_KEY not found in .env${NC}"
  echo "Please run ./deploy to set up environment variables"
  exit 1
fi

echo -e "${CYAN}üöÄ Sales Intelligence API Tester${NC}"
echo -e "${BLUE}API Endpoint: $API_ENDPOINT${NC}"
echo -e "${BLUE}API Key: ${API_KEY:0:8}...${NC}"
echo ""

# Function to run a test and format output
run_test() {
  local test_name="$1"
  local curl_command="$2"
  local is_async="$3"
  
  echo -e "${YELLOW}üß™ Testing: $test_name${NC}"
  echo -e "${PURPLE}Command: $curl_command${NC}"
  echo ""
  
  # Run the curl command and capture output
  if output=$(eval "$curl_command" 2>&1); then
    echo -e "${GREEN}‚úÖ Request submitted successfully:${NC}"
    echo "$output" | jq . 2>/dev/null || echo "$output"
    
    # If this is an async endpoint, extract request ID and poll for results
    if [ "$is_async" = "true" ]; then
      # Try to get researchSessionId first (for research streaming), then requestId
      request_id=$(echo "$output" | jq -r '.researchSessionId // .requestId // empty' 2>/dev/null)
      initial_status=$(echo "$output" | jq -r '.status // empty' 2>/dev/null)
      
      if [ -n "$request_id" ] && [ "$request_id" != "null" ]; then
        # Check if already completed (from cache)
        if [ "$initial_status" = "completed" ]; then
          echo ""
          # Check if response contains enhanced analysis or just raw data
          analysis_check=$(echo "$output" | jq -r '.data.analysis // empty' 2>/dev/null)
          if [ -n "$analysis_check" ] && [ "$analysis_check" != "null" ] && [ "$analysis_check" != "empty" ]; then
            echo -e "${GREEN}üéâ $test_name completed immediately (enhanced analysis from cache)!${NC}"
          else
            echo -e "${YELLOW}üéâ $test_name completed immediately (raw data from cache - may need refresh for enhanced analysis)!${NC}"
          fi
          echo -e "${BLUE}Final Result:${NC}"
          echo "$output" | jq . 2>/dev/null || echo "$output"
        else
          echo ""
          echo -e "${BLUE}üîÑ Async request detected. Polling for results...${NC}"
          echo -e "${BLUE}Request ID: $request_id${NC}"
          
          # Determine endpoint type based on test
          local endpoint_type="requests"  # Default for Company Overview
          if [[ "$test_name" == *"Vendor Context"* ]] || [[ "$test_name" == *"Customer Intelligence"* ]]; then
            endpoint_type="workflows"  # Step Functions for Vendor/Customer
          elif [[ "$test_name" == *"Snov"* ]] || [[ "$test_name" == *"Data Collection"* ]]; then
            endpoint_type="research"  # Research Streaming for Snov.io
          fi
          
          poll_async_result "$request_id" "$test_name" "$endpoint_type"
        fi
      else
        echo -e "${YELLOW}‚ö†Ô∏è  No request ID found in response - this might not be an async endpoint${NC}"
      fi
    fi
  else
    echo -e "${RED}‚ùå Failed:${NC}"
    echo "$output"
  fi
  
  echo ""
  echo -e "${CYAN}Press Enter to continue...${NC}"
  read
}

# Function to poll async results
poll_async_result() {
  local request_id="$1"
  local test_name="$2"
  local endpoint_type="$3"  # "requests", "workflows", or "research"
  local max_attempts=30  # 5 minutes max (10 seconds * 30)
  local attempt=1
  
  # Determine the correct status endpoint
  local status_endpoint
  if [ "$endpoint_type" = "workflows" ]; then
    status_endpoint="$API_ENDPOINT/workflows/$request_id/status"
  elif [ "$endpoint_type" = "research" ]; then
    status_endpoint="$API_ENDPOINT/api/research/stream/$request_id/status"
  else
    status_endpoint="$API_ENDPOINT/requests/$request_id/status"
  fi
  
  while [ $attempt -le $max_attempts ]; do
    echo -e "${BLUE}Polling attempt $attempt/$max_attempts...${NC}"
    
    # Check request status
    status_output=$(curl -s -X GET "$status_endpoint" -H "X-API-Key: $API_KEY" 2>&1)
    
    if [ $? -eq 0 ]; then
      status=$(echo "$status_output" | jq -r '.status // empty' 2>/dev/null)
      current_step=$(echo "$status_output" | jq -r '.currentStep // empty' 2>/dev/null)
      progress=$(echo "$status_output" | jq -r '.progress // 0' 2>/dev/null)
      
      # Show meaningful status even if empty
      if [ -z "$status" ] || [ "$status" = "null" ] || [ "$status" = "empty" ]; then
        echo -e "${YELLOW}‚è≥ Status: processing (checking step functions...)${NC}"
      else
        case "$status" in
                  "completed")
          echo -e "${GREEN}üéâ $test_name completed successfully!${NC}"
          
          # Get the actual result from the result endpoint
          local result_endpoint
          if [ "$endpoint_type" = "workflows" ]; then
            result_endpoint="$API_ENDPOINT/workflows/$request_id/result"
          elif [ "$endpoint_type" = "research" ]; then
            result_endpoint="$API_ENDPOINT/api/research/stream/$request_id/result"
          else
            result_endpoint="$API_ENDPOINT/requests/$request_id/result"
          fi
          
          echo -e "${GREEN}Final Result:${NC}"
          result_output=$(curl -s -X GET "$result_endpoint" -H "X-API-Key: $API_KEY" 2>&1)
          
          if [ $? -eq 0 ]; then
            echo "$result_output" | jq . 2>/dev/null || echo "$result_output"
          else
            echo -e "${YELLOW}‚ö†Ô∏è  Could not fetch result, showing status instead:${NC}"
            echo "$status_output" | jq . 2>/dev/null || echo "$status_output"
          fi
          return 0
          ;;
        "failed")
          echo -e "${RED}‚ùå $test_name failed:${NC}"
          echo "$status_output" | jq . 2>/dev/null || echo "$status_output"
          return 1
          ;;
        "processing")
          # Extract step-based progress if available
          step_progress=$(echo "$status_output" | jq -r '.stepProgress // empty' 2>/dev/null)
          step_description=$(echo "$status_output" | jq -r '.stepDescription // empty' 2>/dev/null)
          
          if [ -n "$step_progress" ] && [ "$step_progress" != "null" ] && [ "$step_progress" != "empty" ]; then
            if [ -n "$step_description" ] && [ "$step_description" != "null" ] && [ "$step_description" != "empty" ]; then
              echo -e "${YELLOW}‚è≥ $step_progress - $step_description${NC}"
            else
              echo -e "${YELLOW}‚è≥ $step_progress${NC}"
            fi
          elif [ -n "$current_step" ] && [ "$current_step" != "null" ] && [ "$current_step" != "empty" ]; then
            echo -e "${YELLOW}‚è≥ Still processing... Step: $current_step (${progress}%)${NC}"
          else
            echo -e "${YELLOW}‚è≥ Still processing... Progress: ${progress}%${NC}"
          fi
          ;;
        *)
          # Extract step-based progress for other statuses too
          step_progress=$(echo "$status_output" | jq -r '.stepProgress // empty' 2>/dev/null)
          step_description=$(echo "$status_output" | jq -r '.stepDescription // empty' 2>/dev/null)
          
          if [ -n "$step_progress" ] && [ "$step_progress" != "null" ] && [ "$step_progress" != "empty" ]; then
            if [ -n "$step_description" ] && [ "$step_description" != "null" ] && [ "$step_description" != "empty" ]; then
              echo -e "${YELLOW}‚è≥ $step_progress - $step_description (Status: $status)${NC}"
            else
              echo -e "${YELLOW}‚è≥ $step_progress (Status: $status)${NC}"
            fi
          elif [ -n "$current_step" ] && [ "$current_step" != "null" ] && [ "$current_step" != "empty" ]; then
            echo -e "${YELLOW}‚è≥ Status: $status - Step: $current_step (${progress}%)${NC}"
          else
            echo -e "${YELLOW}‚è≥ Status: $status${NC}"
          fi
          ;;
        esac
      fi
    else
      echo -e "${RED}‚ùå Failed to check status: $status_output${NC}"
    fi
    
    # Wait before next attempt
    sleep 10
    attempt=$((attempt + 1))
  done
  
  echo -e "${RED}‚è∞ Timeout: $test_name did not complete within 5 minutes${NC}"
  echo -e "${BLUE}You can check the status later with request ID: $request_id${NC}"
  return 1
}

# Main menu loop
while true; do
  clear
  echo -e "${CYAN}üöÄ Sales Intelligence API Tester${NC}"
  echo -e "${BLUE}Choose an endpoint to test:${NC}"
  echo ""
  
  echo -e "${GREEN}=== Core Sales Intelligence APIs ===${NC}"
  echo "1)  Health Check"
  echo "2)  Company Overview (Async)"
  echo ""
  
  echo -e "${GREEN}=== Company Lookup APIs ===${NC}"
  echo "3)  Company Search by Name"
  echo ""
  
  echo -e "${GREEN}=== Context-Aware Intelligence ===${NC}"
  echo "4)  Vendor Context Analysis"
  echo "5)  Customer Intelligence (Context-Aware)"
  echo ""
  
  echo -e "${GREEN}=== Research Streaming & Data Sources ===${NC}"
  echo "6)  Research Streaming - SSE"
  echo "7)  Snov.io Email Finder"
  echo "8)  Snov.io Email Verification"
  echo "9)  Snov.io Domain Search"
  echo ""
  
  echo -e "${GREEN}=== Cache Management ===${NC}"
  echo "10) Cache Statistics"
  echo "11) Clear All Cache"
  echo "12) View Cache by Type"
  echo "13) Clear Cache by Type"
  echo ""
  
  echo -e "${GREEN}=== Custom Test ===${NC}"
  echo "14) Custom curl command"
  echo ""
  
  echo "0) Exit"
  echo ""
  
  read -p "Enter your choice (0-14): " choice
  
  case $choice in
    1)
      run_test "Health Check" \
        "curl -s '$API_ENDPOINT/health'" \
        "false"
      ;;
      
    2)
      read -p "Enter company name (default: Shopify): " company_name
      read -p "Enter domain (required, e.g. shopify.com): " domain
      company_name=${company_name:-Shopify}
      
      # Domain is required for the company overview endpoint
      if [ -z "$domain" ]; then
        echo -e "${RED}‚ùå Error: Domain is required for Company Overview endpoint${NC}"
        continue
      fi
      
      run_test "Company Overview - $company_name" \
        "curl -s -X POST '$API_ENDPOINT/companies/$domain/overview' -H 'X-API-Key: $API_KEY' -H 'Content-Type: application/json' -d '{}'" \
        "true"
      ;;
      
    3)
      read -p "Enter company name to search (default: shopify): " query
      read -p "Enter limit (default: 5): " limit
      query=${query:-shopify}
      limit=${limit:-5}
      run_test "Company Search by Name - $query" \
        "curl -s -X GET '$API_ENDPOINT/companies/lookup?query=$query&limit=$limit' -H 'X-API-Key: $API_KEY'" \
        "false"
      ;;
      
    4)
      read -p "Enter company name (default: Shopify): " company_name
      company_name=${company_name:-Shopify}
      
      json_data="{\"companyName\":\"$company_name\"}"
      
      run_test "Vendor Context Analysis - $company_name" \
        "curl -s -X POST '$API_ENDPOINT/vendor/context' -H 'X-API-Key: $API_KEY' -H 'Content-Type: application/json' -d '$json_data'" \
        "true"
      ;;
      
    5)
      read -p "Enter prospect company name (default: Tesla): " prospect_company
      read -p "Enter your company name (optional): " vendor_company
      echo "Select user persona:"
      echo "  1) AE (Account Executive) - Default"
      echo "  2) CSM (Customer Success Manager)"  
      echo "  3) SE (Sales Engineer)"
      echo "  4) Skip persona (will use 'unknown')"
      read -p "Enter choice (1-4, default: 1): " persona_choice
      
      prospect_company=${prospect_company:-Tesla}
      persona_choice=${persona_choice:-1}
      
      json_data="{\"prospectCompany\":\"$prospect_company\""
      if [ -n "$vendor_company" ]; then
        json_data="$json_data,\"vendorCompany\":\"$vendor_company\""
      fi
      
      # Add user persona based on selection
      case $persona_choice in
        1)
          json_data="$json_data,\"userPersona\":{\"role\":\"AE\",\"name\":\"Sales Rep\",\"segment\":\"Enterprise\",\"region\":\"North America\"}"
          ;;
        2)
          json_data="$json_data,\"userPersona\":{\"role\":\"CSM\",\"name\":\"Customer Success Rep\",\"segment\":\"Enterprise\",\"region\":\"North America\"}"
          ;;
        3)
          json_data="$json_data,\"userPersona\":{\"role\":\"SE\",\"name\":\"Sales Engineer\",\"segment\":\"Enterprise\",\"region\":\"North America\"}"
          ;;
        4)
          # Skip persona - will default to "unknown"
          ;;
      esac
      
      json_data="$json_data}"
      
      run_test "Customer Intelligence (Context-Aware) - $prospect_company" \
        "curl -s -X POST '$API_ENDPOINT/customer/intelligence' -H 'X-API-Key: $API_KEY' -H 'Content-Type: application/json' -d '$json_data'" \
        "true"
      ;;
      
    6)
      read -p "Enter area ID (default: decision_makers): " area_id
      read -p "Enter company ID (default: shopify.com): " company_id
      area_id=${area_id:-decision_makers}
      company_id=${company_id:-shopify.com}
      
      # Step 1: Initiate research stream
      echo -e "${BLUE}Step 1: Initiating research stream...${NC}"
      initiate_response=$(curl -s -X POST "$API_ENDPOINT/api/research/stream?areaId=$area_id&companyId=$company_id" -H "X-API-Key: $API_KEY")
      echo "$initiate_response" | jq . 2>/dev/null || echo "$initiate_response"
      
      research_session_id=$(echo "$initiate_response" | jq -r '.researchSessionId // empty' 2>/dev/null)
      
      if [ -n "$research_session_id" ] && [ "$research_session_id" != "null" ]; then
        echo -e "${GREEN}Research session created: $research_session_id${NC}"
        echo ""
        
        # Step 2: Get streaming events
        echo -e "${BLUE}Step 2: Getting streaming events...${NC}"
        events_response=$(curl -s -X GET "$API_ENDPOINT/api/research/stream/$research_session_id/events" -H "X-API-Key: $API_KEY")
        echo "$events_response" | jq . 2>/dev/null || echo "$events_response"
        echo ""
        
        # Step 3: Get status
        echo -e "${BLUE}Step 3: Getting research status...${NC}"
        status_response=$(curl -s -X GET "$API_ENDPOINT/api/research/stream/$research_session_id/status" -H "X-API-Key: $API_KEY")
        echo "$status_response" | jq . 2>/dev/null || echo "$status_response"
        echo ""
        
        # Step 4: Get results (which may include Snov.io data)
        echo -e "${BLUE}Step 4: Getting research results...${NC}"
        results_response=$(curl -s -X GET "$API_ENDPOINT/api/research/stream/$research_session_id/result" -H "X-API-Key: $API_KEY")
        echo "$results_response" | jq . 2>/dev/null || echo "$results_response"
      else
        echo -e "${RED}Failed to create research session${NC}"
      fi
      
      echo ""
      echo -e "${CYAN}Press Enter to continue...${NC}"
      read
      ;;
      
    7)
      read -p "Enter domain (default: shopify.com): " domain
      domain=${domain:-shopify.com}
      
      echo -e "${BLUE}Testing Snov.io Email Finder directly...${NC}"
      echo -e "${YELLOW}Note: This calls the real Snov.io Email Finder API${NC}"
      
      # Test real Snov.io Email Finder API
      run_test "Snov.io Email Finder API - $domain" \
        "curl -s -X POST '$API_ENDPOINT/api/research/stream?areaId=snov_email_finder&companyId=$domain' -H 'X-API-Key: $API_KEY'" \
        "true"
      ;;
      
    8)
      read -p "Enter domain (default: shopify.com): " domain
      domain=${domain:-shopify.com}
      
      echo -e "${BLUE}Testing Snov.io Email Verification...${NC}"
      echo -e "${YELLOW}Note: This calls the real Snov.io Email Verifier API${NC}"
      
      run_test "Snov.io Email Verifier API - $domain" \
        "curl -s -X POST '$API_ENDPOINT/api/research/stream?areaId=snov_email_verifier&companyId=$domain' -H 'X-API-Key: $API_KEY'" \
        "true"
      ;;
      
    9)
      read -p "Enter domain (default: shopify.com): " domain
      domain=${domain:-shopify.com}
      
      echo -e "${BLUE}Testing Snov.io Domain Search...${NC}"
      echo -e "${YELLOW}Note: This calls the real Snov.io Domain Search API${NC}"
      
      run_test "Snov.io Domain Search API - $domain" \
        "curl -s -X POST '$API_ENDPOINT/api/research/stream?areaId=snov_domain_search&companyId=$domain' -H 'X-API-Key: $API_KEY'" \
        "true"
      ;;
      
    10)
      run_test "Cache Statistics" \
        "curl -s -X GET '$API_ENDPOINT/cache/stats' -H 'X-API-Key: $API_KEY'" \
        "false"
      ;;
      
    11)
      echo -e "${YELLOW}‚ö†Ô∏è  This will clear all cached data. Are you sure? (y/N)${NC}"
      read -p "" confirm
      if [[ $confirm =~ ^[Yy]$ ]]; then
        run_test "Clear Cache" \
          "curl -s -X DELETE '$API_ENDPOINT/cache' -H 'X-API-Key: $API_KEY'" \
          "false"
      else
        echo -e "${BLUE}Cache clear cancelled${NC}"
        sleep 1
      fi
      ;;
      
    12)
      echo -e "${BLUE}Available cache types:${NC}"
      echo "‚Ä¢ company_overview      - Company overview analysis results"
      echo "‚Ä¢ company_search        - Company search results"
      echo "‚Ä¢ sales_intelligence_cache - General sales intelligence cache"
      echo "‚Ä¢ serp_api_organic_results - Google search results"
      echo "‚Ä¢ vendor_context_analysis - Vendor context analysis"
      echo "‚Ä¢ customer_intelligence_analysis - Customer intelligence"
      echo "‚Ä¢ snov_contacts_raw     - Snov.io contact data"
      echo "‚Ä¢ snov_verification_raw - Snov.io email verification data"
      echo "‚Ä¢ async_request_tracking - Research session tracking"
      echo ""
      read -p "Enter cache type to view: " cache_type
      if [ -n "$cache_type" ]; then
        run_test "View Cache Type: $cache_type" \
          "curl -s '$API_ENDPOINT/cache/list?type=$cache_type' -H 'X-API-Key: $API_KEY'" \
          "false"
      else
        echo -e "${RED}No cache type entered${NC}"
        sleep 1
      fi
      ;;
      
    13)
      echo -e "${BLUE}Available cache types:${NC}"
      echo "‚Ä¢ company_overview      - Company overview analysis results"
      echo "‚Ä¢ company_search        - Company search results"
      echo "‚Ä¢ sales_intelligence_cache - General sales intelligence cache"
      echo "‚Ä¢ serp_api_organic_results - Google search results"
      echo "‚Ä¢ vendor_context_analysis - Vendor context analysis"
      echo "‚Ä¢ customer_intelligence_analysis - Customer intelligence"
      echo "‚Ä¢ snov_contacts_raw     - Snov.io contact data"
      echo "‚Ä¢ snov_verification_raw - Snov.io email verification data"
      echo "‚Ä¢ async_request_tracking - Research session tracking"
      echo ""
      read -p "Enter cache type to clear: " cache_type
      if [ -n "$cache_type" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: This will permanently delete all cache entries of type: $cache_type${NC}"
        read -p "Are you sure? (y/N): " confirm
        if [[ $confirm =~ ^[Yy]$ ]]; then
          run_test "Clear Cache Type: $cache_type" \
            "curl -s -X DELETE '$API_ENDPOINT/cache/clear-type?type=$cache_type' -H 'X-API-Key: $API_KEY'" \
            "false"
        else
          echo -e "${GREEN}Operation cancelled${NC}"
          sleep 1
        fi
      else
        echo -e "${RED}No cache type entered${NC}"
        sleep 1
      fi
      ;;
      
    14)
      echo -e "${YELLOW}Enter your custom curl command (without curl):${NC}"
      read -p "> " custom_command
      if [ -n "$custom_command" ]; then
        run_test "Custom Command" \
          "curl $custom_command" \
          "false"
      else
        echo -e "${RED}No command entered${NC}"
        sleep 1
      fi
      ;;
      
    0)
      echo -e "${GREEN}üëã Goodbye!${NC}"
      exit 0
      ;;
      
    *)
      echo -e "${RED}Invalid option. Please choose 0-14.${NC}"
      sleep 1
      ;;
  esac
done 